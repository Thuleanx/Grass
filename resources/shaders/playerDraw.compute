#version 430
layout(local_size_x = 8, local_size_y = 1, local_size_z = 8) in; 
#include utils.compute
layout(rgba32f, binding = 0) uniform image2D velocityBuffer;
// layout(rgba32f, binding = 1) uniform image2D maskBuffer;

const int VELOCITY_BUFFER_SZ = 1000;
const int MASK_RADIUS = 20;
const int MASK_SZ = MASK_RADIUS * 2 + 1;

uniform vec2 pos = vec2(0,0); // world pos
uniform vec3 playerVelocity = vec3(0,0,0);
uniform sampler2D maskTexture;

float len2(vec2 v) { return dot(v,v);}

void main() {
	if (int(gl_GlobalInvocationID.x) >= MASK_SZ) return;
	if (int(gl_GlobalInvocationID.z) >= MASK_SZ) return;

	ivec2 focusPosition = ivec2(pos);
	ivec2 ipos = focusPosition + ivec2(gl_GlobalInvocationID.xz) - MASK_RADIUS;

	if (ipos.x < 0 || ipos.y < 0 || ipos.x >= VELOCITY_BUFFER_SZ || ipos.y >= VELOCITY_BUFFER_SZ) return;

	vec4 velocity = imageLoad(velocityBuffer, ipos) * 2 - 1;
	// vec2 velocity2 = velocity.zw;
	vec2 velocity2 = velocity.xy;

	// vec2 velocityAtMask = (imageLoad(maskBuffer, ivec2(gl_GlobalInvocationID.xz)).xy + 1)/2;
	vec2 velocityAtMask = texture(maskTexture, vec2(gl_GlobalInvocationID.xz)/float(2*MASK_RADIUS)).xy;

	vec2 maskDir = vec2(gl_GlobalInvocationID.xz) 
		+ vec2(-MASK_RADIUS, -MASK_RADIUS);

	float projectionAgainstVelocity = dot(playerVelocity.xz, vec2(maskDir.x, maskDir.y));

	float partingStrength = projectionAgainstVelocity > 0 || len2(playerVelocity.xz) < 0.1 ? 0.2 : 0.1;

	vec2 velocityToStore = 
		len2(velocity2) < 1.1*len2(velocityAtMask) ? 
		mix(velocity2, velocityAtMask, partingStrength) : velocity2;

	velocity.xy = velocityToStore;
	// velocity.zw = velocityToStore;

	// the good old lerp
	// imageStore(velocityBuffer, ipos, vec4(velocityAtMask != vec2(0,0) ? 1:0, 0, 0, 1));
	imageStore(velocityBuffer, ipos, vec4((velocity + 1)/2));
	// imageStore(velocityBuffer, ipos, vec4(1, 0, 0, 1));
}