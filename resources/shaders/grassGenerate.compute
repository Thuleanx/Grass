#version 430
layout(local_size_x = 8, local_size_y = 1, local_size_z=8) in; // if ur GPU has warp size 64, then feel free to change this to 818
#include utils.compute

struct DrawVertex {
	vec3 posWS; //0
	float idHash; //3
	vec3 normWS; // 4
	float grassHeight; // 7
	vec2 uv; // 8
	vec2 planeUV; // 10
	vec3 rootWS; // 12
	float padding; 
};

struct DrawTriangle {
	DrawVertex vertices[3];
};

layout(std430, binding=0) buffer DrawTriangles
{
	DrawTriangle triangles[];
};

uniform int bladeCntX;
uniform int bladeCntZ;
uniform float bladeWidth;
uniform float bladeWidthVariance;

uniform float bladePosVariance;

uniform float bladeHeight;
uniform float bladeHeightVariance;
uniform float bladeHeightNoiseScale;

uniform float bladeBendMax;

const int MAX_SUPPORTED_SEGMENTS = 7;
const int MAX_SUPPORTED_TRIANGLES = MAX_SUPPORTED_SEGMENTS * 2 - 1;
const int MAX_SUPPORTED_BLADEPOINTS = MAX_SUPPORTED_SEGMENTS * 2 + 1;
uniform int bladeSegments = 1;
uniform float bladeCurvature;

uniform float hillHeightMax;
uniform float hillHeightNoiseScale;

uniform vec2 density;

vec3 triangleNormal(vec3 p0, vec3 p1, vec3 p2) {
	return normalize(cross(p1-p0, p2-p0));
}

void setupBladePoint(inout DrawVertex vertex, vec3 offsetWS, 
	vec3 posOS, vec3 normalOS, vec2 uv, mat4 toWS) {

	vertex.posWS = vec3(toWS * vec4(posOS, 1)) + offsetWS;
	vertex.normWS = vec3(normalize(toWS * vec4(normalOS, 0)));
	vertex.uv = uv;
}

void createBlade(
	in vec3 posWS,
	out DrawTriangle blade[MAX_SUPPORTED_TRIANGLES]) {

	posWS += snoise(posWS.xz * hillHeightNoiseScale + 12300) * hillHeightMax;

	float grassHeightNoise = snoise(posWS.xz*300);
	float grassHeight = pow(clamp(iqnoise(posWS.xz * bladeHeightNoiseScale, 0.5f, 0.5f) + pow(abs(grassHeightNoise),5) * sign(grassHeightNoise) * 0.25, 0, 1), 2); 
	float height = bladeHeight + bladeHeightVariance * grassHeight;
	float width = bladeWidth + bladeWidthVariance * random1(posWS.xz + 123);
	float maxBend = bladeBendMax * M_PI / 2 * random1(posWS.xz + 1230);

	mat4 bendMatrix = rotateAroundAxis(vec3(1,0,0), maxBend);
	mat4 rotMatrix = rotateAroundAxis(vec3(0,1,0), snoise(posWS.xz * 0321) * 2 * M_PI);
	mat4 scaleMatrix = mat4(
		vec4(width,0,0,0),
		vec4(0,height,0,0),
		vec4(0,0,1,0),
		vec4(0,0,0,1)
	);

	mat4 toWS = rotMatrix * bendMatrix * scaleMatrix;

	DrawVertex vertices[MAX_SUPPORTED_BLADEPOINTS];

	for (int i = 0; i < bladeSegments; i++) {
		float v = i/float(bladeSegments);
		float u = v / 2;

		mat4 bendBladeMatrix = rotateAroundAxis(vec3(1,0,0), maxBend * pow(v, bladeCurvature));
		mat4 toWSSegment = rotMatrix * bendBladeMatrix * scaleMatrix;

		setupBladePoint(vertices[i*2], posWS, vec3(2*(u-0.5), v, 0), vec3(0), vec2(u,v), toWSSegment);
		setupBladePoint(vertices[i*2+1], posWS, vec3(2*(0.5-u), v, 0), vec3(0), vec2(1-u,v), toWSSegment);
	}

	setupBladePoint(vertices[bladeSegments*2], posWS, vec3(0, 1, 0), vec3(0), vec2(0.5,1), toWS);

	float idHash = snoise((posWS.xz+1230) * 333);
	for (int i = 0; i <= bladeSegments*2-2; i++) {
		vec3 normal = triangleNormal(vertices[i].posWS, vertices[i+1].posWS, vertices[i+2].posWS);
		for (int j = 0; j < 3; j++) {
			blade[i].vertices[j].posWS = vertices[i+j].posWS;
			blade[i].vertices[j].normWS = normal;
			blade[i].vertices[j].uv = vertices[i+j].uv;
			blade[i].vertices[j].idHash = idHash;
			blade[i].vertices[j].grassHeight = grassHeight;
			blade[i].vertices[j].planeUV = 
				gl_GlobalInvocationID.xz * vec2(1.00/(2*bladeCntX), 1.00/(2*bladeCntZ));
			blade[i].vertices[j].rootWS = posWS;
		}
	}
}

void main() {
	if (int(gl_GlobalInvocationID.x) >= 2*bladeCntX + 1) return;
	if (int(gl_GlobalInvocationID.z) >= 2*bladeCntZ + 1) return;

	vec3 posWS = (vec3(gl_GlobalInvocationID.xyz) - vec3(bladeCntX, 0, bladeCntZ)) * vec3(1.00/density.x,0,1.00/density.y);
	posWS.xz += snoise2(gl_GlobalInvocationID.xz * 1000) * bladePosVariance;

	int id = int(int(gl_GlobalInvocationID.x) * (2*bladeCntZ+1)) + int(gl_GlobalInvocationID.z);

	DrawTriangle blade[MAX_SUPPORTED_SEGMENTS*2-1];
	createBlade(posWS, blade);

	int numTriangles = bladeSegments * 2 - 1;
	for (int i = 0; i < numTriangles; i++) 
		triangles[id * numTriangles + i] = blade[i];
}