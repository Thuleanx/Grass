#version 430
layout(local_size_x = 8, local_size_y = 1, local_size_z=4) in;

struct DrawVertex {
	vec3 posWS;
	float padding0;
	vec3 normWS;
	float padding1;
};

struct DrawTriangle {
	DrawVertex vertices[3];
};

layout(std430, binding=0) buffer DrawTriangles
{
	DrawTriangle triangles[];
};

uniform int bladeCntX;
uniform int bladeCntZ;
uniform float bladeWidth;
uniform float bladeHeight;
uniform vec2 density;

vec3 triangleNormal(vec3 p0, vec3 p1, vec3 p2) {
	return normalize(cross(p1-p0, p2-p0));
}

void createBlade(
	in vec3 posWS,
	out DrawTriangle blade[1]) {

	vec3 normal = vec3(0,1,0);
	vec3 tangent = vec3(1,0,0);
	vec3 bitangent = vec3(0,0,1);

	vec3 v[3] = vec3[3](
		posWS - tangent * bladeWidth,
		posWS + tangent * bladeWidth,
		posWS + normal * bladeHeight
	);

	blade[0].vertices[0].posWS = v[0];
	blade[0].vertices[1].posWS = v[1];
	blade[0].vertices[2].posWS = v[2];

	vec3 bladeNormal = triangleNormal(v[0],v[1],v[2]);
	for (int k = 0; k < 3; k++) blade[0].vertices[k].normWS;
}

void main() {
	if (int(gl_GlobalInvocationID.x) >= 2*bladeCntX + 1) return;
	if (int(gl_GlobalInvocationID.y) > 0) return;
	if (int(gl_GlobalInvocationID.z) >= 2*bladeCntZ + 1) return;

	vec3 posWS = (vec3(gl_GlobalInvocationID.xyz) - vec3(bladeCntX, 0, bladeCntZ)) ; //* vec3(1.00/density.x,0,1.00/density.y)

	int id = int(int(gl_GlobalInvocationID.x) * (2*bladeCntZ+1)) + int(gl_GlobalInvocationID.z);

	DrawTriangle blade[1];
	createBlade(posWS, blade);
	triangles[id] = blade[0];
}