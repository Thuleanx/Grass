#version 430
layout(local_size_x = 8, local_size_y = 1, local_size_z = 8) in; 
#include utils.compute
layout(rgba32f, binding = 0) uniform image2D velocityBuffer;

const int VELOCITY_BUFFER_SZ = 1000;

float stiffness = 5;
float damping = 2;

uniform float deltaTime = 0;

void main() {
	if (int(gl_GlobalInvocationID.x) >= VELOCITY_BUFFER_SZ) return;
	if (int(gl_GlobalInvocationID.y) >= VELOCITY_BUFFER_SZ) return;

	ivec2 ipos = ivec2(gl_GlobalInvocationID.xz);

	vec4 grassSway = imageLoad(velocityBuffer, ipos) * 2 - 1;
	// grassSway.xy = mix(grassSway.xy, vec2(0,0), 0.02);

	vec2 currentVelocity = grassSway.zw;
	vec2 deviationFromCenter = grassSway.xy;

	vec2 acceleration = -stiffness * deviationFromCenter - damping * currentVelocity;
	currentVelocity += deltaTime * acceleration;
	deviationFromCenter += deltaTime * currentVelocity;
	deviationFromCenter = vec2(
		clamp(deviationFromCenter.x, -1, 1),
		clamp(deviationFromCenter.y, -1, 1)
	);

	imageStore(velocityBuffer, ipos, (vec4(deviationFromCenter, currentVelocity) + 1) / 2);
}